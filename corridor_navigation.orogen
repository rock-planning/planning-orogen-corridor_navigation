name "corridor_navigation"
version "0.1"

using_library "vfh_star"
using_library "trajectory_follower"
using_library 'corridor_navigation'
import_types_from "base"
import_types_from "envire"
import_types_from "tilt_scan"

import_types_from "vfh_star/Types.h"
import_types_from "corridor_navigation/VFHServoingConf.hpp"


task_context "ServoingTask" do
    input_port('map', ro_ptr('std/vector</envire/BinaryEvent>')).
        doc("Current local map")

    input_port("global_trajectory", "std::vector</base/Trajectory>").
        doc("The global trajectory which is followed by the planner")

    input_port("sweep_status", 'tilt_scan::SweepStatus').
        doc("Sweep status of input devices. This port is optional")

    output_port("trajectory", "std::vector</base/Trajectory>")

    output_port('debugVfhTree', '/vfh_star/DebugTree').
        doc 'the resulting internal search tree'

    output_port('horizonDebugData', 'vfh_star::HorizonPlannerDebugData').
        doc 'debug data of the horizon planner'

    output_port('targetPointOnGlobalTrajectory', 'base::Waypoint').
        doc 'The current point on the global trajectory from wich the horizon is derived'

    output_port('targetPointInMap', 'base::Waypoint').
        doc 'The current point on the global trajectory from wich the horizon is derived in map frame'

    output_port('debugMap', ro_ptr('std/vector</envire/BinaryEvent>')).
        doc("Current local map")

    ##########################
    # transformer parameters
    ##########################

    transformer do
        #Transformation from the body center point into the coordinate frame of the output trajectory
	transformation("body_center", "trajectory")
        #Transformation from the map to the body center point
        transformation("body_center", "map")
        #Transformation from the the body center to the input trajectory
        transformation("body_center", "global_trajectory")

	max_latency(0.1)
    end

    property('search_conf', '/vfh_star/TreeSearchConf').
        doc('Parametrization of the search')
    property('cost_conf', '/corridor_navigation/VFHServoingConf').
        doc('Parametrization of the cost function')

    property('search_horizon', 'double').
        doc('The forward distance on the global trajectory. This is used to generate the heading for the planner.')

    property('fail_count',  'int32_t', 1).
    	doc('The number of times in a row where no trajectorie could be computed, that makes the task fail')
    property('unknown_retry_count',  'int32_t', 2).
    	doc('In case the trajectorie goes through unknown terrain, it is cut. This parameter defines how often the task will wait for a sensor sweep to complete before failing.')

    property('allowBackwardsDriving', 'bool', true).
        doc('This property specifies if the robot is allowed to drive backwards')

    property('replanning_delay', 'double', 10).
        doc 'Minimal time in seconds to wait until another replanning is allowed'

    property('min_trajectory_lenght', 'double', 0.2).
        doc('Minimal length of the output trajectory. The planned trajectory gets cut if it goes through unknown terrain.').
        doc("If the resulting trjacetory length is smaler than this parameter an trajectory_through_unknown error will be generated")

    property('minDriveProbability', 'double', 0.3).
        doc("The minimal mean probability the terrain in front of the robot must have, to allow path planning")

    property('allow_exception', 'bool', true).
        doc 'setting this value to false disables the exception states in case the planner did not find a solution. Pretty usefull for parameter tuning on log data'

    property('goalReachedTolerance', 'double', 0.1).
        doc 'If the distance to the end of the trajectory is below this value, the trajectory is considered driven'

    exception_states :no_solution, :trajectory_through_unknown
    runtime_states :reached_end_of_trajectory, :input_trajectory_empty, :transformation_missing

    needs_configuration
    port_driven
    worstcase_processing_time 0.3	
end

task_context "PoseAlignmentTask" do
    input_port('target_pose', '/base/Pose').
        doc 'the target pose after final alignment'

    output_port('motion_commands', '/base/MotionCommand2D')
        doc 'motion commands to perform the alignment'

    transformer do
        transformation('body','world')
        transformation("body", "odometry")
        max_latency(0.1)
    end

    property('turn_speed',  'double', 0.0)
    property('forward_speed',  'double', 0.0)
    property('min_distance_to_target',  'double', 0.0)
        .doc("If the robot is less than this distance away from the target position, it will assume it reached it")
    property('min_alginment_angle',  'double', 0.0)
        .doc("The precision of the alignement the robot will try to achive")
    property('retry_distance',  'double', 0.0)
        .doc("If the robot is more than the retry distance away from the target, it will
              realign to the target position and try driving there again")

    exception_states :TOO_FAR_FROM_TARGET

    periodic 0.1
end

